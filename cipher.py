"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Jeff Zheng, this
programming assignment is my own work and I have not provided this code to
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: jrz554
UT EID 2:
"""

def rail_fence_encode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: returns a single string that is encoded with
        rail fence algorithm
    """
    rail = ['' for _ in range(key)]
    row = 0
    direction = 1

    for char in string:
        rail[row] += char
        if row == 0:
            direction = 1
        elif row == key - 1:
            direction = -1
        row += direction

    return ''.join(rail)

def rail_fence_decode(string, key):
    """
    pre: string is a string of characters and key is a positive
        integer 2 or greater and strictly less than the length
        of string
    post: function returns a single string that is decoded with
        rail fence algorithm
    """
    matrix = [['' for _ in range(len(string))] for _ in range(key)]
    directiondown = None
    row, col = 0, 0
    for i in range(len(string)):
        if row == 0:
            directiondown = True
        elif row == key - 1:
            directiondown = False

        matrix[row][col] = '*'
        col += 1
        row += 1 if directiondown else -1
    index = 0
    for i in range(key):
        for j in range(len(string)):
            if matrix[i][j] == '*' and index < len(string):
                matrix[i][j] = string[index]
                index += 1
    result = ''
    row, col = 0, 0
    for i in range(len(string)):
        if row == 0:
            directiondown = True
        elif row == key - 1:
            directiondown = False

        result += matrix[row][col]
        col += 1
        row += 1 if directiondown else -1
    return result

def filter_string(string):
    """
    pre: string is a string of characters
    post: function converts all characters to lower case and then
        removes all digits, punctuation marks, and spaces. It
        returns a single string with only lower case characters
    """
    return ''.join([c for c in string.lower() if c.isalpha()])

def encode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the plain text
    post: function returns a single character encoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    shift = ord(p.lower()) - ord('a')
    if s.isupper():
        return chr((ord(s) - ord('A') + shift) % 26 + ord('A'))
    if s.islower():
        return chr((ord(s) - ord('a') + shift) % 26 + ord('a'))
    return s

def decode_character(p, s):
    """
    pre: p is a character in the pass phrase and s is a character
        in the encrypted text
    post: function returns a single character decoded using the
        Vigenere algorithm. You may not use a 2-D list
    """
    shift = ord(p.lower()) - ord('a')
    if s.isupper():
        return chr((ord(s) - ord('A') - shift) % 26 + ord('A'))
    if s.islower():
        return chr((ord(s) - ord('a') - shift) % 26 + ord('a'))
    return s

def vigenere_encode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is encoded with
        Vigenere algorithm
    """
    filteredstring = filter_string(string)
    filteredphrase = filter_string(phrase)
    encoded = ''
    for idx, char in enumerate(filteredstring):
        p_char = filteredphrase[idx % len(filteredphrase)]
        encoded += encode_character(p_char, char)
    return encoded
def vigenere_decode(string, phrase):
    """
    pre: string is a string of characters and phrase is a pass phrase
    post: function returns a single string that is decoded with
        Vigenere algorithm
    """
    filteredstring = filter_string(string)
    filteredphrase = filter_string(phrase)
    decoded = ''
    for idx, char in enumerate(filteredstring):
        p_char = filteredphrase[idx % len(filteredphrase)]
        decoded += decode_character(p_char, char)
    return decoded

def main():
    """Main function that reads stdin and runs each cipher"""
    print("Rail Fence Cipher")
    print()
    plain_text = input()
    key = int(input())
    print(f"Plain Text: {plain_text}")
    print(f"Key: {key}")
    print(f"Encoded Text: {rail_fence_encode(plain_text, key)}")
    print()
    cipher_text = input()
    key = int(input())
    print(f"Encoded Text: {cipher_text}")
    print(f"Key: {key}")
    print(f"Decoded Text: {rail_fence_decode(cipher_text, key)}")
    print()
    print("Vigenere Cipher")
    print()
    plain = input()
    phrase = input()
    filtered = filter_string(plain)
    filtered_phrase = filter_string(phrase)
    print(f"Plain Text: {plain}")
    print(f"Pass Phrase: {phrase}")
    print(f"Encoded Text: {vigenere_encode(filtered, filtered_phrase)}")
    print()
    cipher = input()
    phrase = input()
    filtered_phrase = filter_string(phrase)
    print(f"Encoded Text: {cipher}")
    print(f"Pass Phrase: {phrase}")
    print(f"Decoded Text: {vigenere_decode(cipher, filtered_phrase)}")

# Do NOT modify the following code.
if __name__ == "__main__":
    main()
